What happens when you initialize a repository? Why do you need to do it?

    Git creates all the files it needs for operating. I need to do it so git can
    tack file and I can start making commits.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    It allows me to choose which files I want to commit, even if multiple files
    have changed at the same time. This might allow me to commit an important change
    at the same time I'm working on a minor change on different files.

How can you use the staging area to make sure you have one commit per logical
change?

    If I made a minor change on a certain file to fix a bug, and that bug didn't
    interact with a feature I was working on in another file, I could easily just
    commit the file with the bug fix instead of all the current state of the project.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    If I want to do experimental things I could use branches, I would have what I
    want in a separate branch and the working main version in master. I could also
    add a "nickname" to some point on the project, so I could easily jump there.

How do the diagrams help you visualize the branch structure?

    It helps me to see on which commit they split into branches, and helps me to
    get an idea of what the code might or might not contain.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    The result is a new commit with all the changes made in both branches. It is
    represented as a new commit with both tips of the branches as parents, so it
    makes easy to know from where the changes came from.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
